#+TITLE:
#+PROPERTY: exports code
#+PROPERTY: session *R_org*
#+PROPERTY: noweb yes
#+LATEX_HEADER: \definecolor{lightgrey}{HTML}{F0F0F0}
#+LATEX_HEADER: \definecolor{solarizedlightbg}{HTML}{FCF4DC}
-----


* Simple examples and test cases for =md= knitr export

Test that arguments are correctly passed down to the generated =Rmd= file.

** Simple code blocks

At first we don't specify any =:ravel= parameters.

#+NAME: first-block
#+BEGIN_SRC R :exports code :results silent
  library(ascii)
  5 + 5
#+END_SRC

** Figures

Translating some of the properties for figures (=R= plots) down to the =Rmd=. In
the first block we don't specify any =:ravel= parameters.

#+NAME: plot-test
#+BEGIN_SRC R :exports results :results graphics :file plot-test.png :width 5 :height 4 :units in :res 600 :pointsize 6
  plot(3, 3, pch=16, main="Best plot ever")
#+END_SRC
#+CAPTION: I'm the caption from the figure, as defined in the org file.
#+ATTR_LATEX: :center :placement [H] :width 5cm
#+NAME: figure-plot-test
#+RESULTS: test-org

# The plot in Figure [[figure-plot-test]] was generated without any =:ravel=
# arguments.
Next we specify also some arguments with =:ravel=, thus, the plots
generated by the =org-mode= export and the output generated with the =render=
function from the =knitr= (=rmarkdown=) package should look different.

#+NAME: plot-test-2
#+CAPTION: I'm the caption of the source code block.
#+BEGIN_SRC R :exports results :results graphics :file fig-test-org-2.png :width 5 :height 4 :units in :res 600 :pointsize 6 :bg "olivedrab" :ravel dpi=72
  plot(3, 3, pch=16, main="Meaningful plot")
#+END_SRC
#+ATTR_LATEX: :center :placement [H] :width 5cm
#+RESULTS: fig-test-org-2

Specifying =dev.args= in =:ravel=.

#+NAME: plot-dev-args
#+BEGIN_SRC R :results graphics :exports results :file plot-dev-args.png :width 10 :height 3 :units cm :res 300 :pointsize 5 :ravel dev.args=list(bg="olivedrab"), fig.cap="Figure caption specified as :ravel argument."
  plot(3, 3, main="plot form 1 to 10")
#+END_SRC
#+CAPTION: Just a plain plot again
#+RESULTS: plot-dev-args

** Testing eval

That's using =:eval yes=, we expect =eval=TRUE=.

#+BEGIN_SRC R :results silent :eval yes
  6 + 6
#+END_SRC

That's using =:eval no=, we expect =eval=FALSE=.

#+BEGIN_SRC R :results silent :eval no
  6 + 6
#+END_SRC

That's using =:eval never=, we expect =eval=FALSE=.

#+BEGIN_SRC R :results silent :eval never
  6 + 6
#+END_SRC

That's using =:eval never=, but specify =:ravel= with =eval=TRUE=. We expect
=eval=TRUE=.

#+BEGIN_SRC R :results silent :eval never :ravel eval=TRUE
  6 + 6
#+END_SRC

** Testing exports

That's using =:exports code=, we expect =echo=TRUE=.

#+BEGIN_SRC R :exports code :ravel width=10
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:exports both=, we expect =echo=TRUE=.

#+BEGIN_SRC R :exports both
  a <- 6 + 6
  cat("blabla")
  a
  6 + 6
#+END_SRC

That's using =:exports results=, we expect =echo=FALSE=.

#+BEGIN_SRC R :exports results
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:exports none=, we expect =echo=FALSE=.

#+BEGIN_SRC R :exports none
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:exports none=, but =:ravel echo=TRUE= we expect =echo=TRUE=.

#+BEGIN_SRC R :exports none :ravel echo=TRUE
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

** Testing results

That's using =:results silent=, we expect =results= "hide".

#+BEGIN_SRC R :results silent :exports both
  5 + 5
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:results raw= but =:exports code=, we expect =results= "hide".

#+BEGIN_SRC R :results output raw :exports code
  5 + 5
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC


That's using =:results raw=. That exports it raw, for all other cases =org-mode=
puts it into =verbatim= tex blocks. Note: that's with =:results value raw=.

#+BEGIN_SRC R :results value raw :exports both
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's plain default.

#+BEGIN_SRC R :exports both
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:ravel results=markup=.

#+BEGIN_SRC R :ravel results='markup' :exports both
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:results value verbatim=.

#+BEGIN_SRC R :results value verbatim :exports both
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

That's using =:results output verbatim=.

#+BEGIN_SRC R :results output verbatim :exports both
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC


That's using =:ravel results verbatim=

#+BEGIN_SRC R :ravel results='verbatim' :exports both
  6 + 6
  a <- 6 + 6
  cat("blabla")
  a
#+END_SRC

** Tables

By specifying =type = 'org'= , the  =ascii= package allows to print an =R=
=data.frame= or =matrix= as an =org= table.

Have =:results output raw :exports results= in the org-header.

#+NAME: table-test
#+BEGIN_SRC R :results output raw :exports both
  ## Define a simple table.
  Tab <- data.frame(a=c(1, 4), b=c(4, 6))
  ## Print it as an ascii org table
  suppressWarnings(
      print(
          ascii(Tab, header=TRUE)
	, type="org")
  )

#+END_SRC
#+RESULTS: table-test

Testing =pander= tables:

#+NAME: pander-table-test
#+BEGIN_SRC R :results output raw :exports both
  library(pander)
  ## Define a simple table.
  Tab <- data.frame(a=c(1, 4), b=c(4, 6))
  ## Print it as an ascii org table
  pandoc.table(Tab, style="grid")

#+END_SRC

#+RESULTS: pander-table-test

The same table but with =style= being ="rmarkdown"= . That does only work for
=org= export, however with right justification.

#+NAME: pander-table-test-markdown
#+BEGIN_SRC R :results output raw :exports both
  ## Define a simple table.
  Tab <- data.frame(a=c(1, 4), b=c(4, 6))
  ## Print it as an ascii org table
  pandoc.table(Tab, style="rmarkdown", justify="rr", caption="I am a simple caption.")

#+END_SRC

#+RESULTS: pander-table-test-markdown


Tables with =knitr=: =markdown= format seems to be supported in =org= export,
=pandoc=, or =rst= format not.

#+NAME: knitr-table-markdown
#+BEGIN_SRC R :results output raw :exports both
  library(knitr)
  kable(Tab, format="markdown", caption="This is just a test caption.")
#+END_SRC

#+RESULTS: knitr-table-markdown


=kable= tables seem to be supported by =org= too, but they don't allow to use
captions. The worst case scenario is to add two table exports, one that works
for =org-mode= and one that can be used in the exported =Rmd=. This could be
done in the following way:

#+NAME: example-org-table
#+BEGIN_SRC R :results output raw :exports both
  suppressWarnings(
      print(
          ascii(Tab, caption="Any caption generated by the ascii package.", header=TRUE)
      , type="org")
  )

#+END_SRC
#+RESULTS: example-org-table

#+NAME: example-knitr-table
#+BEGIN_SRC R :results output raw :eval yes :exports both
  pandoc.table(Tab, style="rmarkdown", caption="I am a simple caption generated with pander.")

#+END_SRC

** Code block re-usage						   :noexport:

=org-mode= supports =noweb= syntax, i.e. code blocks can be re-used in another
code block using =<<code-name>>=. From my experience, in contrast to
e.g. =Sweave=, this should be used with caution, as larger analysis documents
with lots of reused code blocks can become slow or even unresponsive when
processed and exported in Emacs.

Now =ox-ravel= automatically expands the =noweb= references upon export.




