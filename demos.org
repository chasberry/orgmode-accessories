#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil prop:nil
#+OPTIONS: stat:t tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+TITLE: demos
#+DATE: <2014-08-26 Tue>, [2016-04-17 Sun]
#+AUTHOR: Charles Berry
#+EMAIL: ccberry@ucsd.edu
#+DESCRIPTION: demonstrate/test ravel capabilities
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.3.1 (Org mode 8.3beta)

To run all of the demonstrations, go to [[Run and Save All Demos]] and
execute the src block there. Every other section has an example of
ravel capabilities with instructions on how to run it and the expected
result.

* Simple R src block
  :PROPERTIES:
  :EXPORT_FILE_NAME: simple-src-block.pdf
  :CUSTOM_ID:       80D43BC0-3AB7-4483-ABEF-30C8E251B874
  :END:

Run this interactively, viz.

: C-c C-e C-s C-b r L

or from emacs-lisp using

#+NAME: simple-R-src-block
#+BEGIN_SRC emacs-lisp :exports code :wrap example
  (set-buffer
   (org-ravel-export-to-buffer 'ravel-latex 
                               "* ravel-latex Output *" 
                               nil t nil t))
  (buffer-substring-no-properties (point-min) (point-max))
#+END_SRC

#+NAME: simple-src-block
#+BEGIN_SRC R
a <- 1
b <- 1 + a
(a+b)^b
#+END_SRC

** expected result						   :noexport:

The buffer * ravel-latex Output * should contain:


#+BEGIN_example
Run this interactively, viz.

\begin{verbatim}
C-c C-e C-s C-b r L
\end{verbatim}

or from emacs-lisp using


\begin{verbatim}
(set-buffer
 (org-ravel-export-to-buffer 'ravel-latex 
			     "* ravel-latex Output *" 
			     nil t nil t))
(buffer-substring-no-properties (point-min) (point-max))
\end{verbatim}


<<simple-src-block>>=
a <- 1
b <- 1 + a
(a+b)^b
@ %def
#+END_example


* Simple inline src block
  :PROPERTIES:
  :EXPORT_FILE_NAME: simple-inline-src-block.pdf
  :CUSTOM_ID:       83121E77-5B68-4B81-A444-3B6A756EDD1C
  :END:
Run this interactively, viz.

: C-c C-e C-s C-b r L

or from emacs-lisp using

#+NAME: simple-inline-src-block
#+BEGIN_SRC emacs-lisp :exports code :wrap example
  (set-buffer
   (org-ravel-export-to-buffer 'ravel-latex 
                               "* ravel-latex Output *" 
                               nil t nil t))
  (buffer-substring-no-properties (point-min) (point-max))
#+END_SRC


Line ending with inline src block: src_R{sum(rnorm(10))}

src_R{sum(rnorm(10))} Line starting with inline src block

Line containing src_R{sum(rnorm(10))} inline src block

** expected result						   :noexport:

   The buffer * ravel-latex Output * should contain:


#+BEGIN_example
Run this interactively, viz.

\begin{verbatim}
C-c C-e C-s C-b r L
\end{verbatim}

or from emacs-lisp using

\begin{verbatim}
(set-buffer
 (org-ravel-export-to-buffer 'ravel-latex 
			     "* ravel-latex Output *" 
			     nil t nil t))
(buffer-substring-no-properties (point-min) (point-max))
\end{verbatim}


Line ending with inline src block: \Sexpr{ sum(rnorm(10)) }

\Sexpr{ sum(rnorm(10)) } Line starting with inline src block

Line containing \Sexpr{ sum(rnorm(10)) } inline src block
#+END_example

* Src block with graph for Sweave
  :PROPERTIES:
  :EXPORT_FILE_NAME: graphic-src-block.pdf
  :CUSTOM_ID:       36234656-157D-4F1D-B441-E727DFCC0251
  :END:


Run this interactively, viz.

\begin{verbatim}
C-c C-e C-s r l
\end{verbatim}


Do a qqplot and plot the identity line.

#+BEGIN_SRC  R :ravel fig=TRUE
qqnorm(rnorm(10))
abline(a=0,b=1,lty=2)
#+END_SRC

** expected result						   :noexport:

   The file =graphic-src-block.Rnw= should contain code that this
   src block will turn into a pdf with a nice figure.

#+BEGIN_SRC sh :results value :eval never-export
R CMD Sweave --pdf graphic-src-block.Rnw
#+END_SRC

* Expanding a Document via ~knitr::knit_expand()~
  :PROPERTIES:
  :CUSTOM_ID:       EFF2E38D-38B5-4ED0-8048-028DADE7DDC4
  :END:

The org-mode template in the ~stuff~ src block is read by the ~excode~ src
block and inline src blocks are converted to knitr delimiters and org
is converted to latex. Then the latex is processed by ~knit_expand()~.

It is necessary here to use special delimiters in ~knit_expand()~ as
the latex exporter insists on escaping ={{= as =\{\{= and likewise for =}}=.

To demonstrate, run the ~demo-expansion~ src block and browse the
results block.




#+NAME: demo-expansion
#+BEGIN_SRC emacs-lisp :eval never-export
  (require 'ob-org)
  (let ((org-confirm-babel-evaluate nil))
    (org-sbe "knit-expand" (ktmp excode)))
#+END_SRC


#+NAME: stuff
#+BEGIN_SRC org :exports code

  @@latex:\section{@@ The Letter src_R{i} @@latex:}@@

  The letter src_R{i} 
  - can be upcased like this: src_R{toupper(i)}
  - its character codes is src_R{charToRaw(i)} 
  - src_R{toupper(i)}'s character code is src_R{charToRaw(toupper(i))}.

#+END_SRC

#+NAME: excode
#+BEGIN_SRC emacs-lisp :var code=stuff :exports code :wrap latex
  (org-ravel-export-string-as code 'ravel-latex 
                              t nil nil "braces")
#+END_SRC


#+NAME: knit-expand
#+HEADER: :var ktmp=excode
#+BEGIN_SRC R :results output :wrap latex
  require(knitr)
  protected_braces <- c( "\\{\\{", "\\}\\}" ) # ox-latex escapes braces
  for (i in letters[1:5]){
      res <- knit_expand(text=ktmp, delim = protected_braces)
      cat(res)
  }

#+END_SRC


* Src block with latex caption for knitr
  :PROPERTIES:
  :EXPORT_FILE_NAME: captioned-src-block.pdf
  :CUSTOM_ID:       C341969B-90F3-4C27-AA7F-5352A9669506
  :END:


Run this interactively, viz.

\begin{verbatim}
C-c C-e C-s r l
\end{verbatim}

and respond with a =y= when prompted:

: Evaluate this latex code block (lcap) on your system? (y or n) 


~:exports none~ assures that the contents of the ~lcap~ src block are not
exported as is. Note that =ob-latex= must be loaded.

#+NAME: lcap
#+BEGIN_SRC latex :exports none
  qqplot of variables from a Gaussian distributon with unit mean and
  variance. Note that it should appear like this: $ y = x\beta +
  \epsilon $, where $\beta$ is 1 and $\epsilon$ is pretty small.
#+END_SRC

The latex caption will be brought into the R variable =lcap_ref= by this
empty src block:

#+BEGIN_SRC R :var lcap_ref=lcap
#+END_SRC

Now do the qqplot taking =lcap_ref= as the caption, and plot the
identity line.

#+NAME: lcap-user
#+BEGIN_SRC  R :ravel fig.cap=lcap_ref
qqnorm(rnorm(10))
abline(a=0,b=1,lty=2)
#+END_SRC

** expected result						   :noexport:

   The file =captioned-src-block.Rnw= should contain code that this
   src block will turn into a pdf with a nicely captioned figure.

#+NAME: run-knitr-with-latex-caption
#+BEGIN_SRC R :results value
require(knitr)
knit2pdf("captioned-src-block.Rnw")
#+END_SRC

#+RESULTS: run-knitr-with-latex-caption
: captioned-src-block.pdf

* Src block with a computed caption for knitr
  :PROPERTIES:
  :EXPORT_FILE_NAME: computed-caption-src-block.pdf
  :CUSTOM_ID:       E73A2295-CCB9-43BE-9DA2-87A645366871
  :END:


Run this interactively, viz.

\begin{verbatim}
C-c C-e C-s r l
\end{verbatim}

and respond with a =y= whenever prompted:

: Evaluate this [...] on your system? (y or n) 

Note that =ob-latex= must be loaded.

The R src code for making the =qqplot= is run first. The least squares
fit is extracted, too.

#+NAME: get-qqplot2
#+BEGIN_SRC R
qplt <- qqnorm( rnorm(200), plot.it=FALSE )
ab <- coef( lm( y~x, qplt ))
#+END_SRC

and the \LaTeX caption is written here with inline src blocks.


#+NAME: post-lcap
#+BEGIN_SRC emacs-lisp
  (org-ravel-export-string-as *this* 'ravel-latex t)
#+END_SRC

#+NAME: lcap3
#+BEGIN_SRC latex :exports code :post post-lcap

  qqplot of realizations from a Gaussian distribution
  with unit mean and unit variance.
  Note that it should appear like this: 
  \(y = \alpha + x\beta + \epsilon\)
  where \(\alpha=0\) and \(\beta =1\) and \(\epsilon\) is 
  pretty small. 

  In reality \(\hat\alpha =\) src_R{round(ab[1],3)} and
  \(\hat\beta=\) src_R{round(ab[2],3)}.

#+END_SRC


 The latex caption will be brought into the variable =lcap_ref= by the
 next src block. In this case it really only serves to convert the
 =src_R{}= inlines to =\Sexpr{}= inlines. Outside of captions, long
 sections of text with extensive ~org-mode~ formatting that depend on
 the data in complicated ways can be rendered.

 The caption could have been placed in a ~example~ block. However, the
 inline src blocks would not get handled as easily, and if
 the \LaTeX is hairy, it is nice to be able to edit in ~latex~ edit
 buffers.

#+NAME: knitr-expansion
#+BEGIN_SRC R :var lcapref=lcap3
  lcap_ref <- knit_expand(text=lcapref,delim=c("\\Sexpr{","}"))
#+END_SRC

#+RESULTS:

Now do the qqplot taking =lcap_ref= as the caption, and plot the
fitted and the identity line.

#+NAME: lcap-user2
#+BEGIN_SRC  R :ravel fig.cap=lcap_ref
plot(qplt)
abline(a=0,b=1,lty=2)
abline(coef=ab)
legend("bottomright",lty=1:2,legend=c("fitted","expected"))
#+END_SRC


** expected result						   :noexport:

   The file =computed-caption-src-block.Rnw= should contain code that this
   src block will turn into a pdf with a nicely captioned figure.

#+NAME: run-knitr-with-tricky-latex-caption
#+BEGIN_SRC R :results value
require(knitr)
knit2pdf("computed-caption-src-block.Rnw")
#+END_SRC



* Example 090 engine-c

** Background

The [[https://github.com/yihui/knitr-examples/blob/master/090-engine-c.Rmd][Original Version]] is translated to org mode and slightly modified
in [[Org Version of Example 090]]. The following src block will create a
buffer nearly identical to the original/


#+BEGIN_SRC emacs-lisp :exports results :results silent 
  (require 'ox-md)
  (save-excursion
    (org-next-visible-heading 1)
    (org-ravel-export-to-buffer 'ravel-markdown "Example 090 Rmd"
				nil t nil nil nil nil
				'(("R")("c" . "engine='c'"))))
#+END_SRC


Alternatively, with =ox-md= loaded and ~org-ravel-engines~ including an element:

: ("c" . "engine='c'")
if the point is placed under the [[Org Version of Example 090]] headline then

: C-c C-e C-s r M

will produce an Rmd buffer.

** Org Version of Example 090
  :PROPERTIES:
  :CUSTOM_ID:       24159BC3-1F20-4A49-9268-CE416C2E7B7C
  :END:


: # Compile C Code

#+BEGIN_SRC R
  ## is gcc or clang there ?
    Sys.which(c("gcc","clang"))
#+END_SRC

#+RESULTS:
| /usr/bin/gcc   |
| /usr/bin/clang |
|                |


#+NAME: test-c
#+BEGIN_SRC c :ravel results="hide"
void square(double *x) {
  *x = *x * *x;
}
#+END_SRC

Test the ~square()~ function:

#+BEGIN_SRC R
.C('square', 9)
.C('square', 123)
#+END_SRC

** Expected Result 						   :noexport:

#+BEGIN_EXAMPLE
  ---
  # YAML header created by ox-ravel
  title: Org Version of Example 090
  author: Charles Berry
  date: <2014-08-26 Tue>, [2016-04-17 Sun]
  ---

  # Table of Contents



      # Compile C Code

  ```{r}
  ## is gcc or clang there ?
    Sys.which(c("gcc","clang"))
  ```

  ```{c}
  #| label: test-c
  #| results: "hide"
  void square(double *x) {
    ,*x = *x * *x;
  }
  ```

  Test the `square()` function:

  ```{r}
  .C('square', 9)
  .C('square', 123)
  ```

#+END_EXAMPLE

* Example 029 engine-Rcpp

** Background

The [[https://github.com/yihui/knitr-examples/blob/master/029-engine-Rcpp.Rmd][Original Version]] is translated to org mode and slightly modified
in [[Org Version of Example 029]]. The following src block will create a
buffer nearly identical to the original/


#+BEGIN_SRC emacs-lisp :exports results :results silent 
  (require 'ox-md)
  (save-excursion
    (org-next-visible-heading 1)
    (org-ravel-export-to-buffer 'ravel-markdown "Example 029 Rmd"
				nil t nil nil nil nil
				'(("R")("c++" . "engine='Rcpp'"))))
#+END_SRC

Alternatively, with =ox-md= loaded and ~org-ravel-engines~ including an element:

: ("c++" . "engine='Rcpp'")

if the point is placed under the [[Org Version of Example 029]] headline then

: C-c C-e C-s r M

will produce an Rmd buffer.

** Org Version of Example 029
   :PROPERTIES:
   :CUSTOM_ID:       7C6F9A2F-01CF-477F-A26B-0B8FFFBF18C1
   :END:

: # Call Rcpp from knitr

#+NAME: setup
#+BEGIN_SRC R setup, include=FALSE}
library(knitr)
opts_chunk$set(cache = TRUE) # because the compilation takes time, let's cache it
#+END_SRC

When the chunk option ~engine='Rcpp'~ is specified (or you write the
chunk header as =```{Rcpp}=), the code chunk will be compiled through
*Rcpp* via ~sourceCpp()~:

Test for ~fibonacci~:

#+NAME: fibCpp
#+BEGIN_SRC c++
#include <Rcpp.h>

// [[Rcpp::export]]
int fibonacci(const int x) {
    if (x == 0 || x == 1) return(x);
    return (fibonacci(x - 1)) + fibonacci(x - 2);
}
#+END_SRC

Because ~fibonacci~ was defined with the ~Rcpp::export~ attribute it can now be called as a normal R function:

#+NAME: fibTest
#+BEGIN_SRC R :ravel dependson='fibCpp'
fibonacci(10L)
fibonacci(20L)
#+END_SRC

You can define multiple functions (or helper functions that are not exported) within Rcpp code chunks:

#+NAME: multipleCpp
#+BEGIN_SRC c++
  #include <Rcpp.h>
  using namespace Rcpp;

  // [[Rcpp::export]]
  NumericVector convolveCpp(NumericVector a, NumericVector b) {

      int na = a.size(), nb = b.size();
      int nab = na + nb - 1;
      NumericVector xab(nab);

      for (int i = 0; i < na; i++)
          for (int j = 0; j < nb; j++)
              xab[i + j] += a[i] * b[j];

      return xab;
  }

  // [[Rcpp::export]]
  List lapplyCpp(List input, Function f) {

      List output(input.size());

      std::transform(input.begin(), input.end(), output.begin(), f);
      output.names() = input.names();

      return output;
  }
#+END_SRC

If you want to link to code defined in another package (e.g **RcppArmadillo**) then you need to provide an ~Rcpp::depends~ attribute. For example:

#+NAME: lmCpp
#+BEGIN_SRC c++
// [[Rcpp::depends(RcppArmadillo)]]

#include <RcppArmadillo.h>

using namespace Rcpp;

// [[Rcpp::export]]
List fastLm(NumericVector yr, NumericMatrix Xr) {

    int n = Xr.nrow(), k = Xr.ncol();

    arma::mat X(Xr.begin(), n, k, false); // reuses memory and avoids extra copy
    arma::colvec y(yr.begin(), yr.size(), false);

    arma::colvec coef = arma::solve(X, y);      // fit model y ~ X
    arma::colvec resid = y - X*coef;            // residuals

    double sig2 = arma::as_scalar( arma::trans(resid)*resid/(n-k) );
                                                // std.error of estimate
    arma::colvec stderrest = arma::sqrt(
                    sig2 * arma::diagvec( arma::inv(arma::trans(X)*X)) );

    return List::create(Named("coefficients") = coef,
                        Named("stderr")       = stderrest
    );
}
#+END_SRC

A test:

#+NAME: lmTest
#+BEGIN_SRC R :ravel dependson='lmCpp'
fastLm(rnorm(10), matrix(1:20, ncol = 2))
#+END_SRC

Finally, you can pass additional arguments to ~sourceCpp()~ via the chunk option ~engine.opts~. For example, we can specify ~engine.opts=list(showOutput=TRUE, rebuild=FALSE)~ to show the output of ~R CMD SHLIB~.
** Expected Result						   :noexport:

#+BEGIN_EXAMPLE
  ---
  # YAML header created by ox-ravel
  title: Org Version of Example 029
  author: Charles Berry
  date: <2014-08-26 Tue>, [2016-04-17 Sun]
  ---

  # Table of Contents



      # Call Rcpp from knitr

  ```{r}
  #| label: setup
  library(knitr)
  opts_chunk$set(cache = TRUE) # because the compilation takes time, let's cache it
  ```

  When the chunk option `engine='Rcpp'` is specified (or you write the
  chunk header as `` ```{Rcpp} ``), the code chunk will be compiled through
  ,**Rcpp** via `sourceCpp()`:

  Test for `fibonacci`:

  ```{Rcpp}
  #| label: fibCpp
  #include <Rcpp.h>

  // [[Rcpp::export]]
  int fibonacci(const int x) {
      if (x == 0 || x == 1) return(x);
      return (fibonacci(x - 1)) + fibonacci(x - 2);
  }
  ```

  Because `fibonacci` was defined with the `Rcpp::export` attribute it can now be called as a normal R function:

  ```{r}
  #| label: fibTest
  #| dependson: 'fibCpp'
  fibonacci(10L)
  fibonacci(20L)
  ```

  You can define multiple functions (or helper functions that are not exported) within Rcpp code chunks:

  ```{Rcpp}
  #| label: multipleCpp
  #include <Rcpp.h>
  using namespace Rcpp;

  // [[Rcpp::export]]
  NumericVector convolveCpp(NumericVector a, NumericVector b) {

      int na = a.size(), nb = b.size();
      int nab = na + nb - 1;
      NumericVector xab(nab);

      for (int i = 0; i < na; i++)
	  for (int j = 0; j < nb; j++)
	      xab[i + j] += a[i] * b[j];

      return xab;
  }

  // [[Rcpp::export]]
  List lapplyCpp(List input, Function f) {

      List output(input.size());

      std::transform(input.begin(), input.end(), output.begin(), f);
      output.names() = input.names();

      return output;
  }
  ```

  If you want to link to code defined in another package (e.g ****RcppArmadillo****) then you need to provide an `Rcpp::depends` attribute. For example:

  ```{Rcpp}
  #| label: lmCpp
  // [[Rcpp::depends(RcppArmadillo)]]

  #include <RcppArmadillo.h>

  using namespace Rcpp;

  // [[Rcpp::export]]
  List fastLm(NumericVector yr, NumericMatrix Xr) {

      int n = Xr.nrow(), k = Xr.ncol();

      arma::mat X(Xr.begin(), n, k, false); // reuses memory and avoids extra copy
      arma::colvec y(yr.begin(), yr.size(), false);

      arma::colvec coef = arma::solve(X, y);      // fit model y ~ X
      arma::colvec resid = y - X*coef;            // residuals

      double sig2 = arma::as_scalar( arma::trans(resid)*resid/(n-k) );
						  // std.error of estimate
      arma::colvec stderrest = arma::sqrt(
		      sig2 * arma::diagvec( arma::inv(arma::trans(X)*X)) );

      return List::create(Named("coefficients") = coef,
			  Named("stderr")       = stderrest
      );
  }
  ```

  A test:

  ```{r}
  #| label: lmTest
  #| dependson: 'lmCpp'
  fastLm(rnorm(10), matrix(1:20, ncol = 2))
  ```

  Finally, you can pass additional arguments to `sourceCpp()` via the chunk option `engine.opts`. For example, we can specify `engine.opts=list(showOutput=TRUE, rebuild=FALSE)` to show the output of `R CMD SHLIB`.
#+END_EXAMPLE


* Run and Save All Demos

The following src block saves the results of the above sections to the
directory =ravel-demo-results=.  Note that the ~`ravel-latex~ calls
specify =t= for the body-only argument to generate more readable
results. Change that to =nil= to produce documents for procesing via
~knit()~.

#+BEGIN_SRC emacs-lisp :results file :file ravel-demo-results/knitr-expand.tex
  (require 'ox-ravel)
  (make-directory "ravel-demo-results" t)
  (save-excursion
    (org-babel-ref-goto-headline-id 
     "80D43BC0-3AB7-4483-ABEF-30C8E251B874")
    (org-ravel-export-to-file 'ravel-latex
			      "./ravel-demo-results/simple-src-block.Rnw"
			      nil t nil t)

    (org-babel-ref-goto-headline-id "83121E77-5B68-4B81-A444-3B6A756EDD1C")
    (org-ravel-export-to-file 'ravel-latex
			      "./ravel-demo-results/simple-inline-src-block.Rnw"
			      nil t nil t)

    (org-babel-ref-goto-headline-id "36234656-157D-4F1D-B441-E727DFCC0251")
    (org-ravel-export-to-file 'ravel-latex
			      "./ravel-demo-results/graphic-src-block.Rnw"
			      nil t nil t)
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-ref-goto-headline-id "C341969B-90F3-4C27-AA7F-5352A9669506")
      (org-ravel-export-to-file 'ravel-latex
				"./ravel-demo-results/captioned-src-block.Rnw"
				nil t nil t)
      (org-babel-ref-goto-headline-id "E73A2295-CCB9-43BE-9DA2-87A645366871")
      (org-ravel-export-to-file 'ravel-latex
				"./ravel-demo-results/computed-caption-src-block.Rnw"
				nil t nil t))
    (org-babel-ref-goto-headline-id "24159BC3-1F20-4A49-9268-CE416C2E7B7C")
    (org-ravel-export-to-file 'ravel-markdown
			      "./ravel-demo-results/Example-090.Rmd"
			      nil t nil nil nil nil
			      '(("R")("c" . "engine='c'")))
    (org-babel-ref-goto-headline-id "7C6F9A2F-01CF-477F-A26B-0B8FFFBF18C1")
    (org-ravel-export-to-file 'ravel-markdown
				"./ravel-demo-results/Example-029.Rmd"
				nil t nil nil nil nil
				'(("R")("c++" . "engine='Rcpp'"))))
  (require 'ob-org)
  (let ((org-confirm-babel-evaluate nil))
    (org-sbe "knit-expand" (ktmp excode)))
#+END_SRC

#+RESULTS:
[[file:ravel-demo-results/knitr-expand.tex]]

